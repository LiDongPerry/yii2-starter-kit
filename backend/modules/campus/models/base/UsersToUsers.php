<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\modules\campus\models\base;

use Yii;
use yii\helpers\ArrayHelper;
use backend\modules\campus\models\UserToSchool;
use common\models\User;

/**
 * This is the base-model class for table "users_to_users".
 *
 * @property integer $users_to_users_id
 * @property integer $user_left_id
 * @property integer $user_right_id
 * @property integer $status
 * @property integer $type
 * @property string $aliasModel
 */
abstract class UsersToUsers extends \yii\db\ActiveRecord
{
    CONST UTOU_STATUS_DELETE = 10;  // 标记关闭
    CONST UTOU_STATUS_OPEN   = 20;  // 有效

    CONST UTOU_TYPE_STUDENT   = 100;    // 学生
    CONST UTOU_TYPE_PARENT  = 200;    // 家长
    CONST UTOU_TYPE_TEACHER   = 500;    // 教师
    CONST UTOU_TYPE_LOGISTICS = 600;    // 后勤

    public static function getStatusLabel($value){
        $lable = self::optsStatus();
        if(isset($lable[$value])){
            return $lable[$value];
        }
            return $value;
    }

    public static function optsStatus(){
        return [
            self::UTOU_STATUS_DELETE => '关闭',
            self::UTOU_STATUS_OPEN   => '有效',
        ];
    }

    public static function getTypeLabel($value){
        $lable = self::optsType();
        if(isset($lable[$value])){
            return $lable[$value];
        }
            return $value;
    }

    public static function optsType(){
        return [
            self::UTOU_TYPE_STUDENT   => '学生',
            self::UTOU_TYPE_PARENT    => '家长',
            self::UTOU_TYPE_TEACHER   => '教师',
            self::UTOU_TYPE_LOGISTICS => '后勤',
        ];
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'users_to_users';
    }

   
    public static function getDb(){
        //return \Yii::$app->modules['campus']->get('campus');
        return Yii::$app->get('campus');
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['user_left_id', 'user_right_id','status','type'], 'required'],
            [['user_left_id', 'user_right_id', 'status', 'type'], 'integer']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'users_to_users_id' => Yii::t('backend', 'Users To Users ID'),
            'user_left_id'      => Yii::t('backend', '学生ID'),
            'user_right_id'     => Yii::t('backend', '关联用户ID'),
            'type'              => Yii::t('backend', '关系类型'),
            'status'            => Yii::t('backend', '状态'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
            'user_left_id'  => Yii::t('backend', '学生ID'),
            'user_right_id' => Yii::t('backend', '关联用户ID'),
            'status'        => Yii::t('backend', '10 标记关闭 ；20 有效'),
            'type'          => Yii::t('backend', '100 学生；200 家长； 300； 教师 500； 后勤 600'),
        ]);
    }

    public function getUserToSchool(){
        return $this->hasOne(UserToSchool::className(),['user_id'=>'user_left_id']);
    }
    
    /**
     * 用户所在的班级
     * @return [type] [description]
     */
    public function getUserToGrade(){
        return $this->hasOne(backend\modules\campus\models\UserToGrade::className(),['user_id'=>'user_left_id']);
    }

    /**
     * [getStudentsId 获取全部学生ID]
     * @return [type] [description]
     */
    public static function getStudentsId()
    {
        $ids = UserToSchool::find()
            ->where([
                'school_user_type' => UserToSchool::SCHOOL_USER_TYPE_STUDENTS,
                'status'           => UserToSchool::SCHOOL_STATUS_ACTIVE,
            ])
            ->asArray()->all();
        return ArrayHelper::map($ids,'user_id','user_id');
    }

    /**
     * [relevanceId 获取已的关联ID]
     * @param  string $params [user_left_id:学生ID；user_right_id:关联用户ID]
     * @return [type]         [description]
     */
    public static function relevanceId($params = 'user_right_id')
    {
        $ids = self::find()
            ->where([
                'type'   => self::UTOU_TYPE_PARENT,
                'status' => self::UTOU_STATUS_OPEN,
            ])->asArray()->all();

        return ArrayHelper::map($ids,$params,$params);
    }

    /**
     * [getRelevanceGroup 获取一组互相关联的学生ID和关联用户ID]
     * @param  [type] $user_id [该组内任意用户ID]
     * @param  [type] $type    [关系类型]
     * @return [type]          [description]
     */
    public static function getRelevanceGroup($user_id,$type = self::UTOU_TYPE_PARENT)
    {
        $group = [];
        $user = self::find()->select('user_left_id,user_right_id')
            ->where(['OR',
                ['user_left_id'  => $user_id],
                ['user_right_id' => $user_id]
            ])
            ->andWhere(['status' => self::UTOU_STATUS_OPEN,'type' => $type])
            ->asArray()
            ->one();
        // if ($user) {
        //     $group = [$user['user_left_id'],$user['user_right_id']];
        // }
        return $user;
    }

    /**
     * 获取所在的班级
     */
    /*
    public function getGrade(){
        if($this->userToGrade){
            return $this->userToGrade->grade->grade_name . $this->userToGrade->school->school_title;
        }elseif($this->userToGrade){
            return $this->userToGrade->school->school_title;
        }
    }
    */

    public static function getUserName($id)
    {
        $user = User::findOne($id);
        $name = '';
        if(isset($user->realname) && !empty($user->realname)){
            return $user->realname;
        }
        if(isset($user->username) && !empty($user->username)){
           return $user->username;
        }
        if(isset($user->phone_number) && !empty($user->phone_number)){
            return $user->phone_number;
        }
        return $name;
    }
    
    
    /**
     * @inheritdoc
     * @return \backend\modules\campus\models\query\UsersToUsers the active query used by this AR class.
     */
    public static function find()
    {
        return new \backend\modules\campus\models\query\UsersToUsers(get_called_class());
    }


}
