<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\modules\campus\models\base;

use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "file_storage_item".
 *
 * @property integer $file_storage_item_id
 * @property integer $user_id
 * @property integer $school_id
 * @property integer $grade_id
 * @property integer $file_category_id
 * @property string $type
 * @property integer $size
 * @property string $component
 * @property string $upload_ip
 * @property integer $ispublic
 * @property string $file_name
 * @property string $url
 * @property string $original
 * @property integer $status
 * @property integer $page_view
 * @property integer $sort_rank
 * @property integer $updated_at
 * @property integer $created_at
 *
 * @property \backend\modules\campus\models\FileCategory $fileCategory
 * @property string $aliasModel
 */
abstract class FileStorageItem extends \yii\db\ActiveRecord
{



    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'file_storage_item';
    }
    public static function getDb(){
        return Yii::$app->modules['campus']->get('campus');
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['user_id', 'school_id', 'grade_id', 'file_category_id', 'size', 'ispublic', 'status', 'page_view', 'sort_rank'], 'integer'],
            [['url'], 'required'],
            [['type'], 'string', 'max' => 128],
            [['component', 'file_name'], 'string', 'max' => 255],
            [['upload_ip'], 'string', 'max' => 15],
            [['url'], 'string', 'max' => 512],
            [['original'], 'string', 'max' => 100],
            // [['file_category_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\modules\campus\models\FileCategory::className(), 'targetAttribute' => ['file_category_id' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'file_storage_item_id' => Yii::t('models', 'File Storage Item ID'),
            'user_id' => Yii::t('models', 'User ID'),
            'school_id' => Yii::t('models', 'School ID'),
            'grade_id' => Yii::t('models', 'Grade ID'),
            'file_category_id' => Yii::t('models', '文件分类'),
            'type' => Yii::t('models', '文件类型'),
            'size' => Yii::t('models', 'Size'),
            'component' => Yii::t('models', 'Component'),
            'upload_ip' => Yii::t('models', 'Upload Ip'),
            'ispublic' => Yii::t('models', '是否公开，1公开2私有'),
            'file_name' => Yii::t('models', '服务器保存名称'),
            'url' => Yii::t('models', 'url地址'),
            'original' => Yii::t('models', '原始名称'),
            'updated_at' => Yii::t('models', 'Updated At'),
            'created_at' => Yii::t('models', 'Created At'),
            'status' => Yii::t('models', '是否删除1正常0'),
            'page_view' => Yii::t('models', '预览量'),
            'sort_rank' => Yii::t('models', '排序分值'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
            'file_category_id' => Yii::t('models', '文件分类'),
            'type' => Yii::t('models', '文件类型'),
            'ispublic' => Yii::t('models', '是否公开，1公开2私有'),
            'file_name' => Yii::t('models', '服务器保存名称'),
            'url' => Yii::t('models', 'url地址'),
            'original' => Yii::t('models', '原始名称'),
            'status' => Yii::t('models', '是否删除1正常0'),
            'page_view' => Yii::t('models', '预览量'),
            'sort_rank' => Yii::t('models', '排序分值'),
        ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    // public function getFileCategory()
    // {
    //     return $this->hasOne(\backend\modules\campus\models\FileCategory::className(), ['id' => 'file_category_id']);
    // }


    
    /**
     * @inheritdoc
     * @return \backend\modules\campus\models\query\FileStorageItemQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \backend\modules\campus\models\query\FileStorageItemQuery(get_called_class());
    }


}
