<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\modules\campus\controllers\base;

use backend\modules\campus\models\Notice;
use backend\modules\campus\models\NoticeSearch;
use common\components\Controller;
use yii\web\HttpException;
use yii\helpers\Url;
use yii\filters\AccessControl;
use dmstr\bootstrap\Tabs;

/**
* NoticeController implements the CRUD actions for Notice model.
*/
class NoticeController extends Controller
{


/**
* @var boolean whether to enable CSRF validation for the actions in this controller.
* CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
*/
public $enableCsrfValidation = false;

    /**
    * @inheritdoc
    */
    public function behaviors()
    {
    return [
    'access' => [
    'class' => AccessControl::className(),
    'rules' => [
    [
    'allow' => true,
                        'actions' => ['index', 'view', 'create', 'update', 'delete'],
                        'roles' => ['CampusNoticeFull'],
                    ],
    [
    'allow' => true,
                        'actions' => ['index', 'view'],
                        'roles' => ['CampusNoticeView'],
                    ],
    [
    'allow' => true,
                        'actions' => ['update', 'create', 'delete'],
                        'roles' => ['CampusNoticeEdit'],
                    ],
    
                ],
            ],
    ];
    }

    /**
    * Lists all Notice models.
    * @return mixed
    */
    public function actionIndex()
    {
        $searchModel  = new NoticeSearch;
        $dataProvider = $searchModel->search($_GET);
        //$schools = [Yii::$app->user->identity->currentSchool];
       // $schools = ArrayHelper::map($schools,'id','school_title');
        $dataProvider->sort = [
            'defaultOrder'=>[
                'updated_at' => SORT_DESC
            ]
        ];

        Tabs::clearLocalStorage();

        Url::remember();
        \Yii::$app->session['__crudReturnUrl'] = null;

        return $this->render('index', [
            'dataProvider' => $dataProvider,
            'searchModel'  => $searchModel,
        ]);
    }

    /**
    * Displays a single Notice model.
    * @param string $notice_id
    *
    * @return mixed
    */
    public function actionView($notice_id)
    {
    \Yii::$app->session['__crudReturnUrl'] = Url::previous();
    Url::remember();
    Tabs::rememberActiveState();

    return $this->render('view', [
    'model' => $this->findModel($notice_id),
    ]);
    }

    /**
    * Creates a new Notice model.
    * If creation is successful, the browser will be redirected to the 'view' page.
    * @return mixed
    */
    public function actionCreate()
    {
        $model = new Notice;

        if ($model->load($_POST)) {
            $info = $model->dataSave($_POST['Notice']);

            if(!empty($info['error'])){
                return $this->render('create',['model'=>$model]);
            }

        return $this->redirect(['notice/index']);
        }

        /*
        try {
            if ($model->load($_POST) && $model->save()) {
                return $this->redirect(['view', 'notice_id' => $model->notice_id]);
            } elseif (!\Yii::$app->request->isPost) {
                $model->load($_GET);
            }
        } catch (\Exception $e) {
            $msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
            $model->addError('_exception', $msg);
        }
        */
        return $this->render('create', ['model' => $model]);
    }

    /**
    * Updates an existing Notice model.
    * If update is successful, the browser will be redirected to the 'view' page.
    * @param string $notice_id
    * @return mixed
    */
    public function actionUpdate($notice_id)
    {
        $model = $this->findModel($notice_id);

        if ($model->load($_POST) && $model->save()) {
            return $this->redirect(Url::previous());
        } else {
            return $this->render('update', [
                'model' => $model,
            ]);
        }
    }

    /**
    * Deletes an existing Notice model.
    * If deletion is successful, the browser will be redirected to the 'index' page.
    * @param string $notice_id
    * @return mixed
    */
    public function actionDelete($notice_id)
    {
    try {
    $this->findModel($notice_id)->delete();
    } catch (\Exception $e) {
    $msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
    \Yii::$app->getSession()->addFlash('error', $msg);
    return $this->redirect(Url::previous());
    }

    // TODO: improve detection
    $isPivot = strstr('$notice_id',',');
    if ($isPivot == true) {
    return $this->redirect(Url::previous());
    } elseif (isset(\Yii::$app->session['__crudReturnUrl']) && \Yii::$app->session['__crudReturnUrl'] != '/') {
    Url::remember(null);
    $url = \Yii::$app->session['__crudReturnUrl'];
    \Yii::$app->session['__crudReturnUrl'] = null;

    return $this->redirect($url);
    } else {
    return $this->redirect(['index']);
    }
    }

    /**
    * Finds the Notice model based on its primary key value.
    * If the model is not found, a 404 HTTP exception will be thrown.
    * @param string $notice_id
    * @return Notice the loaded model
    * @throws HttpException if the model cannot be found
    */
    protected function findModel($notice_id)
    {
    if (($model = Notice::findOne($notice_id)) !== null) {
    return $model;
    } else {
    throw new HttpException(404, 'The requested page does not exist.');
    }
    }
}
